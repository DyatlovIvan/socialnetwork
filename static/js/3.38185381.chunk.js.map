{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPost.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onKeyPress","key","updateStatus","onBlur","autoFocus","ProfileDataForm","formik","useFormik","initialValues","fullName","profile","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","values","saveProfile","OnChangeHandler","handleChange","handleSubmit","className","style","info","type","button","contactBlock","id","name","handleBlur","infoString","checked","Object","entries","map","contact","ProfileInfo","Preloader","descriptionBlock","mainInfo","photoBlock","src","photos","large","userPhoto","mainPhoto","isOwner","target","files","console","log","savePhoto","inputFile","htmlFor","profileData","goToEditMode","ProfileData","onClick","contactTitle","contactValue","Contacts","Post","item","alt","message","likeCount","MyPosts","React","memo","postsElement","posts","reverse","p","postsBlock","addPost","AddNewPostHandler","newPostText","AddPostForm","text","validationSchema","Yup","max","required","textarea","placeholder","touched","errors","MyPostContainer","profilePage","dispatch","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","putStatus","ProfilesContainer","compose","withRouter"],"mappings":"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","file":"static/js/3.38185381.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8roTJ\",\"photoBlock\":\"ProfileInfo_photoBlock__2WOJ9\",\"mainPhoto\":\"ProfileInfo_mainPhoto__oRVxS\",\"info\":\"ProfileInfo_info__3nkHa\",\"contactBlock\":\"ProfileInfo_contactBlock__14RWP\",\"contact\":\"ProfileInfo_contact__3uve6\",\"infoString\":\"ProfileInfo_infoString__2jHFR\",\"inputFile\":\"ProfileInfo_inputFile__15jKF\",\"button\":\"ProfileInfo_button__u4gyy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPost_addPost__GFhLm\",\"textarea\":\"MyPost_textarea__24Ezm\",\"button\":\"MyPost_button__1BMdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__20-BL\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PathParamsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype prevStateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\nexport const ProfileStatusWithHooks = (props: PathParamsType) => {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [status,setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const pressKeyHandler = (e: React.KeyboardEvent<HTMLInputElement>)=>{\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode&&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || 'set status!'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       onKeyPress={pressKeyHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       value = {status}\r\n                       autoFocus\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n}","import {useFormik} from \"formik\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profilePageReducer\";\r\nimport React, {ChangeEventHandler} from \"react\";\r\nimport style from './ProfileInfo.module.scss'\r\n\r\ntype ProfileDataFormType = {\r\n    saveProfile: (profileData: ProfileType) => void\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileDataForm = (props: ProfileDataFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            aboutMe: props.profile.aboutMe,\r\n            contacts: {\r\n                facebook: props.profile.contacts.facebook,\r\n                website: props.profile.contacts.website,\r\n                vk: props.profile.contacts.vk,\r\n                twitter: props.profile.contacts.twitter,\r\n                instagram: props.profile.contacts.instagram,\r\n                youtube: props.profile.contacts.youtube,\r\n                github: props.profile.contacts.github,\r\n                mainLink: props.profile.contacts.mainLink,\r\n            }\r\n\r\n\r\n        },\r\n        onSubmit: (values) => props.saveProfile(values as ProfileType)\r\n    })\r\n\r\n    const OnChangeHandler: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = (e) => {\r\n        formik.handleChange(e)\r\n    }\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={style.info}>\r\n            <button type=\"submit\" className={style.button}>Save</button>\r\n            <div className={style.contactBlock}>\r\n                <div>\r\n                    <b>Full name</b>:\r\n                    <div>\r\n                        <input\r\n                            id=\"fullName\"\r\n                            name=\"fullName\"\r\n                            type=\"text\"\r\n                            onChange={OnChangeHandler}\r\n                            onBlur={formik.handleBlur}\r\n                            className={style.infoString}\r\n                            value={formik.values.fullName}/>\r\n                    </div>\r\n\r\n                    <b>Looking for a job</b>:\r\n                    <div><input\r\n                        id=\"lookingForAJob\"\r\n                        name=\"lookingForAJob\"\r\n                        type=\"checkbox\"\r\n                        onChange={formik.handleChange}\r\n                        className={style.infoString}\r\n                        checked={formik.values.lookingForAJob}/>\r\n                    </div>\r\n\r\n\r\n                    <b>My professional skills:</b>:\r\n                    <div><textarea\r\n                        id=\"lookingForAJobDescription\"\r\n                        name=\"lookingForAJobDescription\"\r\n                        onChange={OnChangeHandler}\r\n                        onBlur={formik.handleBlur}\r\n                        className={style.infoString}\r\n                        value={formik.values.lookingForAJobDescription}/>\r\n                    </div>\r\n\r\n\r\n                    <b>About me</b>:\r\n                    <div><textarea\r\n                        id=\"aboutMe\"\r\n                        name=\"aboutMe\"\r\n                        onChange={OnChangeHandler}\r\n                        onBlur={formik.handleBlur}\r\n                        className={style.infoString}\r\n                        value={formik.values.aboutMe}/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {Object.entries(props.profile.contacts).map(([key, value]) => {\r\n                        return <div className={style.contact}>\r\n                            <b>{key}</b>: <div><input\r\n                            id={`contacts.${key}`}\r\n                            name={`contacts.${key}`}\r\n                            type=\"text\"\r\n                            onChange={OnChangeHandler}\r\n                            onBlur={formik.handleBlur}\r\n                            className={style.infoString}\r\n                            value={formik.values.contacts[key as keyof ContactsType]}/>\r\n                        </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import style from './ProfileInfo.module.scss'\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profilePageReducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/userPhoto.png'\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\nexport function ProfileInfo(props: PropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            console.log(e.target.files[0])\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const saveProfileHandler = (profileData: ProfileType) => {\r\n        debugger\r\n        props.saveProfile(profileData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.descriptionBlock}>\r\n                <div className={style.mainInfo}>\r\n                    <div className={style.photoBlock}>\r\n                        <img src={props.profile.photos.large || userPhoto} className={style.mainPhoto}/>\r\n\r\n                        {props.isOwner &&\r\n                        <input id='file' type={'file'} onChange={onMainPhotoSelected} name={'file'}\r\n                               className={style.inputFile}/>}\r\n                        <label htmlFor=\"file\">Change avatar</label>\r\n\r\n                    </div>\r\n                    <ProfileStatusWithHooks status={props.status}\r\n                                            updateStatus={props.updateStatus}/>\r\n                </div>\r\n\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm saveProfile={saveProfileHandler} profile={props.profile}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}/>}\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return (\r\n        <div className={style.info}>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode} className={style.button}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n\r\n            {props.profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.entries(props.profile.contacts).map(([key, value]) => {\r\n                if (value !== null) {\r\n                    return <Contacts key={key} contactTitle={key} contactValue={value}/>\r\n                }\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Contacts = ({contactTitle, contactValue}: ContactsType) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profileData: ProfileType) => void\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}","import style from './Post.module.css'\r\nimport {PostsType} from \"../../../../redux/state\";\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props:PostType){\r\n\r\n    return(\r\n        <div className={style.item}>\r\n            <img src=\"https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51404241-stock-illustration-female-profile-avatar-icon-white.jpg\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import style from './MyPost.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profilePageReducer\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\"\r\n\r\n\r\n\r\ntype MyPostType = {\r\n    posts: Array<PostsType>\r\n    AddNewPostHandler: (newPostText: string) => void\r\n\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostType) => {\r\n    let postsElement = [...props.posts.reverse()].map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>);\r\n\r\n    const AddNewPostHandler = (newPostText: string) => {\r\n        props.AddNewPostHandler(newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <div className={style.addPost}>\r\n                <h3>My Posts</h3>\r\n                <AddPostForm AddNewPostHandler={AddNewPostHandler}/>\r\n            </div>\r\n\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddPostFormType = {\r\n    AddNewPostHandler: (newPostText: string) => void\r\n}\r\n\r\nconst AddPostForm = (props: AddPostFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\"\r\n        },\r\n        validationSchema:Yup.object({\r\n            text:Yup.string().max(15,'Must be 15 characters or less').required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            props.AddNewPostHandler(values.text)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id=\"text\"\r\n                    name=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.text}\r\n                    onBlur={formik.handleBlur}\r\n                    className={style.textarea}\r\n                    placeholder=\"Enter your message\"/>\r\n                {formik.touched.text && formik.errors.text ? <div>{formik.errors.text}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\" className={style.button}>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import {MyPosts} from \"./MyPosts\";\r\nimport {addPost, PostsType} from \"../../../redux/profilePageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    AddNewPostHandler: (newPostText:string) => void\r\n    //onChangeNewPostHandler: (value: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddNewPostHandler: (newPostText) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profilePageReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(photo:File) => void\r\n    saveProfile:(profileData:ProfileType)=>void\r\n}\r\n\r\nexport function Profile(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto = {props.savePhoto}\r\n                         saveProfile = {props.saveProfile}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfileType,\r\n    getUserProfile,\r\n    getStatus,\r\n    putStatus,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../../redux/profilePageReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ownPropsType = mapStateToPropsType & mapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    putStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile:(profileData:ProfileType)=>void\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = +this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.putStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile = {this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n//let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent));\r\n\r\nexport const ProfilesContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, putStatus, savePhoto,saveProfile}),\r\n    withAuthRedirect,\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}