{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPost.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onKeyPress","key","updateStatus","onBlur","autoFocus","ProfileInfo","profile","className","style","headLayer","descriptionBlock","src","photos","small","Preloader","Post","item","alt","message","likeCount","MyPosts","React","memo","postsElement","posts","reverse","map","p","id","postsBlock","addPost","AddNewPostHandler","newPostText","AddPostForm","formik","useFormik","initialValues","text","validationSchema","Yup","max","required","onSubmit","values","handleSubmit","name","handleChange","handleBlur","placeholder","touched","errors","type","MyPostContainer","profilePage","dispatch","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","putStatus","ProfilesContainer","compose","withRouter"],"mappings":"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","file":"static/js/3.5deb7176.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3kkY2\",\"headLayer\":\"ProfileInfo_headLayer__2toqi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPost_addPost__GFhLm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__20-BL\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PathParamsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype prevStateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\nexport const ProfileStatusWithHooks = (props: PathParamsType) => {\r\n    const [editMode,setEditMode] = useState<boolean>(false)\r\n    const [status,setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const pressKeyHandler = (e: React.KeyboardEvent<HTMLInputElement>)=>{\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode&&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'set status!'}</span>\r\n                </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       onKeyPress={pressKeyHandler}\r\n                       onBlur={deactivateEditMode}\r\n                       value = {status}\r\n                       autoFocus\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n}","import style from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profilePageReducer\";\r\nimport { ProfileStatus } from './ProfileStatus';\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType|null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport function ProfileInfo(props:PropsType){\r\n\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    return(\r\n     <div>\r\n         <div className={style.headLayer}>\r\n             {/*<img src='https://telecomdom.com/wp-content/uploads/2019/12/shapka_for_youtube-fon-9.jpg'/>*/}\r\n         </div>\r\n         <div className={style.descriptionBlock}>\r\n             <img src= {props.profile.photos.small}/>\r\n             <ProfileStatusWithHooks status = {props.status}\r\n                            updateStatus = {props.updateStatus}/>\r\n         </div>\r\n     </div>\r\n\r\n    )\r\n}","import style from './Post.module.css'\r\nimport {PostsType} from \"../../../../redux/state\";\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport function Post(props:PostType){\r\n\r\n    return(\r\n        <div className={style.item}>\r\n            <img src=\"https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51404241-stock-illustration-female-profile-avatar-icon-white.jpg\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import style from './MyPost.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profilePageReducer\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\"\r\n\r\n\r\n\r\ntype MyPostType = {\r\n    posts: Array<PostsType>\r\n    AddNewPostHandler: (newPostText: string) => void\r\n\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostType) => {\r\n    let postsElement = [...props.posts.reverse()].map(p => <Post id={p.id} message={p.message} likeCount={p.likeCount}/>);\r\n\r\n    const AddNewPostHandler = (newPostText: string) => {\r\n        props.AddNewPostHandler(newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <div className={style.addPost}>\r\n                <h3>My Posts</h3>\r\n                <AddPostForm AddNewPostHandler={AddNewPostHandler}/>\r\n            </div>\r\n\r\n            <div className={style.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddPostFormType = {\r\n    AddNewPostHandler: (newPostText: string) => void\r\n}\r\n\r\nconst AddPostForm = (props: AddPostFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\"\r\n        },\r\n        validationSchema:Yup.object({\r\n            text:Yup.string().max(15,'Must be 15 characters or less').required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            props.AddNewPostHandler(values.text)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id=\"text\"\r\n                    name=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.text}\r\n                    onBlur={formik.handleBlur}\r\n                    placeholder=\"Enter your message\"/>\r\n                {formik.touched.text && formik.errors.text ? <div>{formik.errors.text}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\">add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import {MyPosts} from \"./MyPosts\";\r\nimport {addPost, PostsType} from \"../../../redux/profilePageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    AddNewPostHandler: (newPostText:string) => void\r\n    //onChangeNewPostHandler: (value: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddNewPostHandler: (newPostText) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profilePageReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport function Profile(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileType, getUserProfile, getStatus, putStatus} from \"../../redux/profilePageReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ownPropsType = mapStateToPropsType & mapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n\r\n\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    putStatus: (status: string) => void\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = +this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.putStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n//let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent));\r\n\r\nexport const ProfilesContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, putStatus}),\r\n    withAuthRedirect,\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}