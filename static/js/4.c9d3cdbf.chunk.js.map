{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogItem","name","Message","message","AddMessageForm","formik","useFormik","initialValues","text","validationSchema","Yup","max","required","onSubmit","values","sendMessageCreator","handleSubmit","id","onChange","handleChange","value","onBlur","handleBlur","placeholder","errors","type","DialogContainer","compose","dialogsPage","dispatch","newMessageBody","dialogElements","dialogs","map","el","img","messageElements","messages","className","style","dialogItem"],"mappings":"kMASMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAShC,OAFiCC,YAAQN,EAARM,EANP,SAACC,GAAgC,IAClDL,EAAwBK,EAAxBL,OAAWM,EADsC,YACzBD,EADyB,YAEtD,OAAKL,EAEE,cAACG,EAAD,eAAeG,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,oBCjB1CC,EAAOC,QAAU,CAAC,QAAU,2B,8HCOrB,SAASC,EAAWL,GACvB,OACI,8BACKA,EAAMM,OCNZ,SAASC,EAAQP,GACpB,OACI,8BACKA,EAAMQ,U,yBCoCnB,IAAMC,EAAiB,SAACT,GACpB,IAAMU,EAASC,YAAU,CACrBC,cAAe,CACXC,KAAM,IAEVC,iBAAiBC,IAAW,CACzBF,KAAKE,MAAaC,IAAI,GAAG,iCAAiCC,SAAS,cAEtEC,SAAU,SAAAC,GACNnB,EAAMoB,mBAAmBD,EAAON,MAChCH,EAAOS,OAAON,KAAK,MAI3B,OACI,uBAAMK,SAAUR,EAAOW,aAAvB,UACI,gCACI,0BACIC,GAAG,OACHhB,KAAK,OACLiB,SAAUb,EAAOc,aACjBC,MAAOf,EAAOS,OAAON,KACrBa,OAAQhB,EAAOiB,WACfC,YAAY,uBACflB,EAAOmB,OAAOhB,KAAO,8BAAMH,EAAOmB,OAAOhB,OAAc,QAE5D,8BACI,wBAAQiB,KAAK,SAAb,0B,yBCxCHC,EAAkBC,YAC3BjC,aAfoB,SAACL,GACrB,MAAO,CACHuC,YAAavC,EAAMuC,YACnBtC,OAAQD,EAAME,KAAKD,WAGA,SAACuC,GACxB,MAAO,CACHd,mBAAoB,SAACe,GACjBD,EAASd,YAAmBe,SAOpCtC,IAF2BmC,EDhBxB,SAAiBhC,GACpB,IAAIoC,EAAiBpC,EAAMiC,YAAYI,QAAQC,KAAI,SAAAC,GAAE,OAAI,cAAClC,EAAD,CAAYiB,GAAIiB,EAAGjB,GAAIhB,KAAMiC,EAAGjC,KAAMkC,IAAKD,EAAGC,SACnGC,EAAkBzC,EAAMiC,YAAYS,SAASJ,KAAI,SAAAC,GAAE,OAAI,cAAChC,EAAD,CAASe,GAAIiB,EAAGjB,GAAId,QAAS+B,EAAG/B,aAK3F,OACI,sBAAKmC,UAAWC,IAAMP,QAAtB,UAEI,qBAAKM,UAAWC,IAAMC,WAAtB,SACKT,IAEL,sBAAKO,UAAWC,IAAMpC,QAAtB,UACI,8BACKiC,IAEL,8BACI,cAAC,EAAD,CAAgBrB,mBAdL,SAACe,GACxBnC,EAAMoB,mBAAmBe","file":"static/js/4.c9d3cdbf.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1-4gm\"};","type DialogItemType = {\r\n    id:number\r\n    name:string\r\n    img:string\r\n}\r\n\r\n\r\n\r\nexport function DialogItem(props:DialogItemType){\r\n    return(\r\n        <div>\r\n            {props.name}\r\n        </div>\r\n    )\r\n}","type MessageType = {\r\n    id:number\r\n    message:string\r\n}\r\n\r\nexport function Message(props:MessageType){\r\n    return(\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import style from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\"\r\nimport React from \"react\";\r\n\r\n\r\ntype DialogType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogType) {\r\n    let dialogElements = props.dialogsPage.dialogs.map(el => <DialogItem id={el.id} name={el.name} img={el.img}/>)\r\n    let messageElements = props.dialogsPage.messages.map(el => <Message id={el.id} message={el.message}/>)\r\n\r\n    const sendMessageCreator = (newMessageBody: string) => {\r\n        props.sendMessageCreator(newMessageBody)\r\n    }\r\n    return (\r\n        <div className={style.dialogs}>\r\n\r\n            <div className={style.dialogItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={style.message}>\r\n                <div>\r\n                    {messageElements}\r\n                </div>\r\n                <div>\r\n                    <AddMessageForm sendMessageCreator={sendMessageCreator}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\n\r\nconst AddMessageForm = (props: AddMessageFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: \"\"\r\n        },\r\n        validationSchema:Yup.object({\r\n           text:Yup.string().max(50,'Must be 50 characters or less').required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            props.sendMessageCreator(values.text)\r\n            formik.values.text='';\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id=\"text\"\r\n                    name=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.text}\r\n                    onBlur={formik.handleBlur}\r\n                    placeholder=\"Enter your message\"/>\r\n                {formik.errors.text ? <div>{formik.errors.text}</div> : null}\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Submit</button>\r\n            </div>\r\n        </form>)\r\n}","import {initialStateType, sendMessageCreator} from \"../../redux/dialogsPageReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: initialStateType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessageCreator: (body: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessageCreator: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n\r\n    }\r\n}\r\nexport const DialogContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}