{"version":3,"sources":["api/api.ts","redux/dialogsPageReducer.ts","components/Users/Users.module.css","components/Navbar/Navbar.module.scss","components/Navbar/Navbar.tsx","utils/objectHalpers.ts","redux/usersReducer.ts","common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/loginForm.tsx","components/Login/Login.tsx","redux/appReducer.ts","hoc/withSuspense.tsx","App.tsx","redux/redux-store.ts","index.tsx","assets/images/preloader.svg","common/preloader/Preloader.tsx","components/Header/Header.module.css","common/Paginator/Paginator.module.css","components/Login/Login.module.css","redux/profilePageReducer.ts","assets/images/userPhoto.png"],"names":["ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","followAPI","postFollow","id","post","deleteFollow","delete","authAPI","getAuth","login","email","password","rememberMe","logout","securityAPI","getCaptchaUrl","profileAPI","getProfile","userId","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","updateProfileInfo","profileData","initialState","dialogs","name","img","messages","message","dialogsPageReducer","state","action","type","newMessageBody","sendMessageCreator","module","exports","Navbar","className","style","nav","to","item","activeClassName","active","updateObjectInArray","items","itemId","newObjParams","map","el","users","totalUserCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUsers","toggleIsFetching","toggleFollowingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","filter","p","s","selectedPage","page","User","user","follow","unfollow","usersPhoto","src","photos","small","userPhoto","followed","disabled","some","Users","props","createSelector","usersPage","getPageSize","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","onPageChangedThunkCreator","this","getUsersThunkCreator","Preloader","React","Component","connect","totalUsersCount","totalCount","bind","Header","isAuth","header","alt","loginBlock","button","textDecoration","errorMassage","captchaUrl","setAuthUserData","payload","setErrorMassage","getCaptchaUrlSuccess","getAuthUserData","Success","url","HeaderContainer","auth","LoginForm","formik","useFormik","initialValues","validationSchema","yup","shape","required","onSubmit","values","validations","touched","error","OnChangeHandler","e","handleChange","handleSubmit","placeholder","onChange","onBlur","handleBlur","value","errors","checked","CaptchaIsRequired","initialized","withSuspense","Suspense","fallback","DialogContainer","lazy","default","ProfileContainer","ProfilesContainer","App","initializeApp","exact","path","render","compose","withRouter","app","reducers","combineReducers","profilePage","profilePageReducer","dialogsPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","preloader","posts","likeCount","profile","newPostText","f","addPost","setStatus","getUserProfile","putStatus","photo","saveProfile","getState","Number"],"mappings":"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","file":"static/js/main.3ac60374.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profilePageReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"d7bfc3c8-2c2d-429a-afe3-69f3367ec679\"\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success=0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype getAuthTypes = {\r\n    data: { id:string, email:string,login:string }\r\n    resultCode:number\r\n    messages:Array<string>\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const followAPI = {\r\n    postFollow(id: number) {\r\n        return instance.post(`follow/${id}`, {}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    deleteFollow(id: number) {\r\n        return instance.delete(`follow/${id}`).then(\r\n            response => {\r\n                return response.data\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<getAuthTypes>('auth/me')\r\n    },\r\n    login(email:string,password:string,rememberMe:boolean=false){\r\n        return instance.post('auth/login',{email,password,rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete('auth/login')\r\n    }\r\n\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number){\r\n       return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put('profile/status',{status:status})\r\n    },\r\n    savePhoto(photoFile:File){\r\n        const formData = new FormData()\r\n        formData.append('image',photoFile)\r\n        return instance.put('profile/photo',formData,{\r\n            headers:{\r\n                'Content-Type':'multiline/from-data'\r\n            }})\r\n    },\r\n    updateProfileInfo(profileData:ProfileType){\r\n        return instance.put('profile',profileData)\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\n\r\n\r\nexport type initialStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Valera',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Sveta',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Tanya',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Anton',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Alexandr',\r\n            img: 'https://st.depositphotos.com/1779253/5140/v/600/depositphotos_51402215-stock-illustration-male-avatar-profile-picture-use.jpg'\r\n        }\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'hi' },\r\n        { id: 2, message: 'how a u?' },\r\n        { id: 3, message: 'yo' },\r\n    ],\r\n}\r\nexport const dialogsPageReducer = (state = initialState, action: DialogsActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            return {...state,messages:[...state.messages,{id: 7, message: action.newMessageBody}]}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport type DialogsActionsTypes = sendMessageCreatorType\r\n\r\n\r\ntype sendMessageCreatorType = ReturnType<typeof sendMessageCreator>\r\nexport const sendMessageCreator = (newMessageBody:string)=>{\r\n    return{\r\n        type: 'SEND-MESSAGE',newMessageBody\r\n    } as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__3PbSp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__29vYb\",\"item\":\"Navbar_item__j6umJ\",\"nav_section\":\"Navbar_nav_section__nMU-8\",\"active\":\"Navbar_active__tO1Pm\",\"activeFriends\":\"Navbar_activeFriends__1Rb03\"};","import style from './Navbar.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={style.nav}>\r\n\r\n            <div>\r\n                <NavLink to='/profile' className={style.item} activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to='/dialogs' className={style.item} activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to='/users' className={style.item} activeClassName={style.active}>Users</NavLink>\r\n            </div>\r\n            <div className={style.item}>News</div>\r\n            <div className={style.item}>Music</div>\r\n            <div className={style.item}>Settings</div>\r\n\r\n\r\n        </nav>\r\n    )\r\n}","import {UserType} from \"../redux/usersReducer\";\r\n\r\nexport const updateObjectInArray = (items:Array<UserType>, itemId:number, newObjParams:{})=>{\r\n    return items.map(el => el.id === itemId ? {...el, ...newObjParams} : {...el})\r\n}","import {followAPI, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/objectHalpers\";\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n    location: {\r\n        city: string\r\n        country: string\r\n    }\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"FOLLOW\": {\r\n            return {...state, users: updateObjectInArray(state.users, action.userId, {followed: true})}\r\n            //state.users.map(el => el.id === action.userId ? {...el, followed: true} : {...el})}\r\n        }\r\n        case 'UNFOLLOW': {\r\n            return {...state, users: updateObjectInArray(state.users, action.userId, {followed: false})}\r\n        }\r\n        case 'SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUserCount: action.totalUsersCount}\r\n        }\r\n        case 'TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"TOGGLE_FOLLOWING_IN_PROGRESS\": {\r\n            return action.isFetching ? {...state, followingInProgress: [...state.followingInProgress, action.userId]}\r\n                : {...state, followingInProgress: state.followingInProgress.filter(el => el !== action.userId)}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UsersActionsTypes =\r\n    followSuccessType\r\n    | unfollowSuccessType\r\n    | setUsersType\r\n    | setCurrentPageType\r\n    | setTotalUsersCountType\r\n    | toggleIsFetchingType\r\n    | toggleFollowingInProgressType\r\n\r\ntype followSuccessType = ReturnType<typeof followSuccess>\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: 'FOLLOW', userId\r\n    } as const\r\n}\r\n\r\ntype unfollowSuccessType = ReturnType<typeof unfollowSuccess>\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: 'UNFOLLOW', userId\r\n    } as const\r\n}\r\n\r\ntype setUsersType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'SET_USERS', users\r\n    } as const\r\n}\r\n\r\ntype setCurrentPageType = ReturnType<typeof setCurrentPage>\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'SET_CURRENT_PAGE', currentPage\r\n    } as const\r\n}\r\n\r\ntype setTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: 'SET_TOTAL_USERS_COUNT', totalUsersCount\r\n    } as const\r\n}\r\ntype toggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: 'TOGGLE_IS_FETCHING', isFetching\r\n    } as const\r\n}\r\n\r\ntype toggleFollowingInProgressType = ReturnType<typeof toggleFollowingInProgress>\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: 'TOGGLE_FOLLOWING_IN_PROGRESS', isFetching, userId\r\n    } as const\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n    }\r\n}\r\n\r\nexport const onPageChangedThunkCreator = (pageNumber: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(pageNumber))\r\n        let response = await usersAPI.getUsers(pageNumber, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number,\r\n                                  apiMethod: (id: number) => any, actionCreator: (userId: number) => { type: string, userId: number }) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, followAPI.deleteFollow.bind(followAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, followAPI.postFollow.bind(followAPI), followSuccess)\r\n    }\r\n}","import s from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?:number\r\n}\r\n\r\nexport const Paginator = ({totalItemsCount,pageSize,currentPage,onPageChanged,portionSize =10,...props}: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    const portionCount = Math.ceil(pagesCount/portionSize)\r\n    const [portionNumber,setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber-1)*portionSize+1\r\n    const rightPortionPageNumber = portionNumber*portionSize\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber>1 &&\r\n            <button onClick={()=>setPortionNumber(portionNumber-1)}>Back</button>}\r\n                {pages.filter(p=> p>=leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                    .map(el => {\r\n                    return <span onClick={() => onPageChanged(el)}\r\n                                 className={`${currentPage === el ? s.selectedPage : ''} ${s.page}`}>\r\n                        {el}\r\n                    </span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={()=>setPortionNumber(portionNumber+1)}>Next</button>}\r\n\r\n        </div>\r\n    )\r\n}","import s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/userPhoto.png\";\r\nimport React from \"react\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    unfollowSuccess: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const User = ({user, unfollowSuccess, followingInProgress, follow, unfollow, ...props}: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img className={s.usersPhoto}\r\n                                 src={user.photos.small === null ? userPhoto : user.photos.small}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(s => s === user.id)}\r\n                                    onClick={() => unfollow(user.id)}\r\n                            >Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(s => s === user.id)}\r\n                                      onClick={() => follow(user.id)\r\n                                      }>Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>\r\n                            {user.name}\r\n                        </div>\r\n                        <div>\r\n                            {user.status}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>\r\n                            {'Russia'}\r\n                        </div>\r\n                        <div>\r\n                            {'City'}\r\n                        </div>\r\n                    </span>\r\n                </span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {Paginator} from \"../../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype PropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    onPageChanged: (pageNumber: number) => void\r\n    unfollowSuccess: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const Users = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalItemsCount={props.totalUserCount}\r\n                       pageSize={props.pageSize}\r\n                       currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}/>\r\n            {props.users.map(el => <User key={el.id}\r\n                                         user={el}\r\n                                         unfollowSuccess={props.unfollowSuccess}\r\n                                         followingInProgress={props.followingInProgress}\r\n                                         follow={props.follow}\r\n                                         unfollow={props.unfollow}/>\r\n            )}\r\n        </div>\r\n    )\r\n}","import {RootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUserSelector = (state:RootStateType)=>{\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUserSelector,(users)=>{\r\n    return users.filter(el=>true)\r\n})\r\n\r\nexport const getPageSize = (state:RootStateType) =>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state:RootStateType) =>{\r\n    return state.usersPage.totalUserCount\r\n}\r\nexport const getCurrentPage = (state:RootStateType) =>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state:RootStateType) =>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:RootStateType) =>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    followSuccess, getUsersThunkCreator, onPageChangedThunkCreator,\r\n    toggleFollowingInProgress,\r\n    unfollowSuccess,follow,unfollow,\r\n    UserType\r\n} from \"../../redux/usersReducer\";\r\nimport React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers\r\n} from \"../../redux/usersSelectors\";\r\n\r\n\r\ntype UsersPresentType = {\r\n    users: Array<UserType>\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    followSuccess: (userId: number) => void\r\n    unfollowSuccess: (userId: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n    onPageChangedThunkCreator: (pageNumber: number, pageSize: number) => void\r\n    follow:(userId:number) => void\r\n    unfollow:(userId:number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPresentType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n\r\n        this.props.onPageChangedThunkCreator(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUserCount={this.props.totalUserCount}\r\n                   pageSize={this.props.pageSize}\r\n                   users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   unfollowSuccess={this.props.unfollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   follow = {this.props.follow}\r\n                   unfollow = {this.props.unfollow}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state: RootStoreType) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUserCount: state.usersPage.totalUserCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    followSuccess, unfollowSuccess,\r\n    toggleFollowingInProgress,\r\n    getUsersThunkCreator, onPageChangedThunkCreator,follow,unfollow\r\n})(UsersContainer)","import { NavLink } from 'react-router-dom'\r\nimport style from './Header.module.css'\r\n\r\ntype HeaderType = {\r\n    login:string | null\r\n    isAuth:boolean\r\n    logout:()=>void\r\n}\r\n\r\nexport function Header({login,isAuth,logout}:HeaderType){\r\n    return(\r\n        <header className={style.header}>\r\n            <img src=\"https://cdn.pixabay.com/photo/2015/12/29/19/46/cat-1113335_960_720.png\" alt=\"logo\"/>\r\n            <div className={style.loginBlock}>\r\n                {isAuth\r\n                    ? <div className={style.login}>{login}  <button className={style.button} onClick={logout}>Log out</button></div>\r\n                    :<NavLink className={style.button} style={{textDecoration:\"none\"}} to = {'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, ResultCodeForCaptchaEnum, ResultCodesEnum, securityAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionType, AppThunk, RootStateType} from \"./redux-store\";\r\n\r\ntype InitialStateType = {\r\n    userId: null | string\r\n    email: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n    errorMassage: string\r\n    captchaUrl: null | string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    errorMassage: '',\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsType) => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET_USER_DATA\": {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case \"AUTH/LOGIN_SUCCESS\": {\r\n            return {...state, errorMassage: action.errorMassage}\r\n        }\r\n        case \"AUTH/GET_CAPTCHA_URL_SUCCESS\": {\r\n            return {...state, captchaUrl: action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport type AuthActionsType =\r\n    | SetAuthUserDataType\r\n    | SetErrorMassageType\r\n    | getCaptchaUrlSuccessType\r\n\r\nexport type SetAuthUserDataType = ReturnType<typeof setAuthUserData>\r\nconst setAuthUserData = (userId: string | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'AUTH/SET_USER_DATA',\r\n        payload: {userId: userId, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport type SetErrorMassageType = ReturnType<typeof setErrorMassage>\r\nexport const setErrorMassage = (errorMassage: string) => {\r\n    return {type: 'AUTH/LOGIN_SUCCESS', errorMassage} as const\r\n}\r\n\r\nexport type getCaptchaUrlSuccessType = ReturnType<typeof getCaptchaUrlSuccess>\r\nconst getCaptchaUrlSuccess = (captchaUrl: string) => {\r\n    return {type: 'AUTH/GET_CAPTCHA_URL_SUCCESS', payload: captchaUrl} as const\r\n}\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthActionsType>) => {\r\n    let response = await authAPI.getAuth()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk => async dispatch => {\r\n        const response = await authAPI.login(email, password, rememberMe)\r\n        if (response.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            debugger\r\n            if (response.data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            dispatch(setErrorMassage(response.data.messages[0]))\r\n        }\r\n}\r\n\r\nexport const logout = (): AppThunk => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): AppThunk => async dispatch => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../../redux/authReducer\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToProps = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchPropsType = {\r\n    logout:()=>void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<mapStateToProps & mapDispatchPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header login={this.props.login}\r\n                       isAuth={this.props.isAuth}\r\n                       logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import {useFormik} from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport style from \"./Login.module.css\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype LoginFormType = {\r\n    errorMassage: string\r\n    setErrorMassage:(errorMassage:string)=>void\r\n    onSubmit: (formData:LoginDataType)=>void\r\n    captchaUrl:null | string\r\n}\r\n\r\nexport const LoginForm = (props:LoginFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '', password: '', rememberMe: false\r\n        },\r\n        validationSchema: yup.object().shape({\r\n            email: yup.string().required('Required').email('incorrectly filled email'),\r\n            password: yup.string().required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            props.onSubmit(values)\r\n        },\r\n    });\r\n    const validations = (touched: boolean | undefined, error: string | undefined) => {\r\n        return touched && error ? <div className={style.error}>{error}</div> : null\r\n    }\r\n    const OnChangeHandler = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        formik.handleChange(e)\r\n        props.setErrorMassage('')\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n            <div>\r\n                <input\r\n                    placeholder=\"login\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    onChange={OnChangeHandler}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.email}/>\r\n                {validations(formik.touched.email, formik.errors.email)}\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    placeholder=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    onBlur={formik.handleBlur}\r\n                    onChange={OnChangeHandler}\r\n                    value={formik.values.password}/>\r\n                {validations(formik.touched.password, formik.errors.password)}\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    id=\"rememberMe\"\r\n                    name=\"rememberMe\"\r\n                    type=\"checkbox\"\r\n                    onChange={formik.handleChange}\r\n                    checked={formik.values.rememberMe}\r\n                />\r\n                <label>remember me</label>\r\n            </div>\r\n            {props.errorMassage && <div className={style.error}>{props.errorMassage}</div>}\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport {LoginDataType, LoginForm} from \"./loginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login,setErrorMassage} from \"../../redux/authReducer\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype LoginType = {\r\n    isAuth: boolean\r\n    errorMassage: string\r\n    captchaUrl: null | string\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    setErrorMassage:(errorMassage:string)=>void\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n    const onSubmit = (formData: LoginDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm errorMassage={props.errorMassage}\r\n                       setErrorMassage = {props.setErrorMassage}\r\n                       onSubmit={onSubmit}\r\n                       captchaUrl = {props.captchaUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        errorMassage: state.auth.errorMassage,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps ,{login,setErrorMassage})(Login)\r\n\r\n","import {AuthActionsType, getAuthUserData} from \"./authReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootStateType} from \"./redux-store\";\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: appReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCESS': {\r\n            return {...state, initialized: true}\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\ntype appReducerActionType = ReturnType<typeof initializedSuccess> | AuthActionsType\r\nexport const initializedSuccess = () => ({type: 'INITIALIZED_SUCCESS'}) as const\r\n\r\nexport const initializeApp = (): ThunkAction<void, RootStateType, unknown, appReducerActionType> => async (dispatch) => {\r\n    await dispatch(getAuthUserData())\r\n    dispatch(initializedSuccess())\r\n\r\n\r\n}","import React from \"react\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props:any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component{...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n//import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\n// import {DialogContainer} from \"./components/Dialogs/DialogsContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/appReducer\";\r\nimport {Preloader} from \"./common/preloader/Preloader\";\r\nimport {RootStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst DialogContainer = React.lazy(() =>\r\n    import('./components/Dialogs/DialogsContainer')\r\n        .then(({DialogContainer}) => ({default: DialogContainer})),\r\n);\r\nconst ProfileContainer = React.lazy(() =>\r\n    import('./components/Profile/ProfileContainer')\r\n        .then(({ProfilesContainer}) => ({default: ProfilesContainer})),\r\n);\r\n\r\n//jsx-> (bable in JS and for component create)React.createElement\r\ntype mapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype ownPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nclass App extends React.Component<ownPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Switch>\r\n                        <Route exact path={\"/\"}\r\n                               render={()=> <Redirect to = {'/profile'}/>}/>\r\n                        <Route path={\"/profile/:userId?\"}\r\n                               render={withSuspense(ProfileContainer)}/>\r\n                        <Route path={\"/dialogs\"}\r\n                               render={withSuspense(DialogContainer)}/>\r\n                        <Route path={\"/users\"} render={() => <UsersContainer/>}/>\r\n                        <Route path={\"/login\"} render={() => <Login/>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp})\r\n)(App)","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {ProfileActionsTypes, profilePageReducer} from \"./profilePageReducer\";\r\nimport {DialogsActionsTypes, dialogsPageReducer} from \"./dialogsPageReducer\";\r\nimport {UsersActionsTypes, usersReducer} from \"./usersReducer\";\r\nimport {AuthActionsType, authReducer} from \"./authReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    usersPage: usersReducer,\r\n    auth:authReducer,\r\n    app:appReducer\r\n\r\n})\r\nexport  type AppActionType = AuthActionsType\r\n    | DialogsActionsTypes\r\n    | ProfileActionsTypes\r\n    | UsersActionsTypes\r\n\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootStateType, unknown, AppActionType>\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\r\n\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\nexport type StoreType = typeof store\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\n\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n        document.getElementById('root')\r\n    );\r\n","export default __webpack_public_path__ + \"static/media/preloader.7528a770.svg\";","import preloader from \"../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () =>{\r\n    return <img src={preloader}/>\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3nQc8\",\"loginBlock\":\"Header_loginBlock__Uhizl\",\"login\":\"Header_login__fa7BK\",\"button\":\"Header_button__2MvSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__24GDK\",\"page\":\"Paginator_page__51sgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__z7idp\"};","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../api/api\";\r\nimport {RootStateType} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nexport type InitialStateType = {\r\n    posts: Array<PostsType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe:string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how a u?', likeCount: 12},\r\n        {id: 2, message: \"It\\'s my first post\", likeCount: 10}\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profilePageReducer = (state = initialState, action: ProfileActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            return {\r\n                ...state,\r\n                posts: [{id: 3, message: action.newPostText, likeCount: 0}, ...state.posts,]\r\n            }\r\n        case \"SET_USER_PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"SET_STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(f => f.id !== action.id)}\r\n        case \"SAVE_PHOTO_SUCCESS\" :\r\n            return {...state, profile : state.profile && {...state.profile, photos: action.photos}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type ProfileActionsTypes =\r\n    | AddPostType\r\n    | DeletePostType\r\n    | SetUserProfileType\r\n    | SetStatusType\r\n    | SavePhotoSuccessType\r\n\r\ntype AddPostType = ReturnType<typeof addPost>\r\nexport const addPost = (newPostText: string) => {\r\n    return {\r\n        type: 'ADD-POST', newPostText\r\n    } as const\r\n}\r\n\r\ntype DeletePostType = ReturnType<typeof deletePost>\r\nexport const deletePost = (postId: number) => {\r\n    return {\r\n        type: 'DELETE-POST', id: postId\r\n    } as const\r\n}\r\n\r\ntype SetUserProfileType = ReturnType<typeof setUserProfile>\r\nconst setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'SET_USER_PROFILE', profile\r\n    } as const\r\n}\r\n\r\ntype SetStatusType = ReturnType<typeof setStatus>\r\nconst setStatus = (status: string) => {\r\n    return {\r\n        type: 'SET_STATUS', status\r\n    } as const\r\n}\r\ntype SavePhotoSuccessType = ReturnType<typeof SavePhotoSuccess>\r\nconst SavePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: 'SAVE_PHOTO_SUCCESS', photos\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n\r\n}\r\nexport const putStatus = (status: string) => (dispatch: Dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\nexport const savePhoto = (photo: File) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.savePhoto(photo)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(SavePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profileData: ProfileType):ThunkAction<void, RootStateType, unknown, ProfileActionsTypes> => async (dispatch,getState:()=>RootStateType) => {\r\n    const userId = Number(getState().auth.userId)\r\n    let response = await profileAPI.updateProfileInfo(profileData)\r\n    if (response.data.resultCode === 0 ) {\r\n       await dispatch(getUserProfile(userId))\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/userPhoto.945a70a0.png\";"],"sourceRoot":""}